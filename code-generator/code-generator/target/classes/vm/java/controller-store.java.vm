package cn.com.bbmg.bidmall.controller.${moduleName};

import cn.com.bbmg.bidmall.common.enums.ResultCode;
import cn.com.bbmg.bidmall.common.exception.ServiceException;
import cn.com.bbmg.bidmall.common.enums.ResultUtil;
import cn.com.bbmg.bidmall.common.vo.ResultMessage;
import ${packageName}.entity.dos.${ClassName};
import ${packageName}.entity.dto.${ClassName}SearchParams;
import ${packageName}.service.${ClassName}Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import lombok.RequiredArgsConstructor;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */

@RestController
@Api(tags = "店铺端,${functionName}接口")
@RequestMapping("/store/${moduleName}/${businessName}" )
@RequiredArgsConstructor(onConstructor = @__(@Autowired))
public class ${ClassName}StoreController {

    private final ${ClassName}Service ${className}Service;

    @GetMapping
    @ApiOperation(value = "分页获取${functionName}")
    public ResultMessage<IPage<${ClassName}>> getByPage(${ClassName}SearchParams param) {
        return ResultUtil.data(${className}Service.get${ClassName}ByPage(param));
    }

    @GetMapping(value = "/{id}")
    @ApiOperation(value = "查看${functionName}详情")
    public ResultMessage<${ClassName}> get(@PathVariable String id){
        ${ClassName} ${className} = ${className}Service.getById(id);
        return new ResultUtil<${ClassName}>().setData(${className});
    }

    @PostMapping
    @ApiOperation(value = "新增${functionName}")
    public ResultMessage<${ClassName}> add(${ClassName} ${className}){
        if(${className}Service.save(${className})){
            return new ResultUtil<${ClassName}>().setData(${className});
        }
        throw new ServiceException(ResultCode.BRAND_SAVE_ERROR);
    }

    @PutMapping("/{id}")
    @ApiOperation(value = "更新${functionName}")
    public ResultMessage<${ClassName}> update(@PathVariable String id, ${ClassName} ${className}){
        if(${className}Service.updateById(${className})){
            return new ResultUtil<${ClassName}>().setData(${className});
        }
        throw new ServiceException(ResultCode.BRAND_UPDATE_ERROR);
    }

    @DeleteMapping(value = "/{ids}")
    @ApiOperation(value = "删除${functionName}")
    public ResultMessage<Object> delete(@PathVariable List ids){
        ${className}Service.removeByIds(ids);
        return ResultUtil.success(ResultCode.SUCCESS);
    }
}
